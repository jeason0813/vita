<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="protected" type="System.Configuration.NameValueSectionHandler, System,Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  </configSections>
  <appSettings>
    <!-- Server type and other parameters for run in Test Explorer in Visual Studio - we can run tests only once -->
    <add key="ServerTypeForTestExplorer" value="MsSql" />
    <add key="UseBatchModeForTestExplorer" value="true" />
    <add key="UseStoredProcsForTestExplorer" value="true" />
    <add key="EnableCacheForTestExplorer" value="true" />
    <!-- Set to true to drop/create all database objects -->
    <add key="ResetDatabase" value="false" />
    <!-- Server types to run as Console app - we can run all tests for multiple server types with different settings (like cache on/off)   -->
    <!--<add key="ServerTypesForConsoleRun" value="MsSql,SqlCe,MySql,Postgres,SQLite" />-->
    <add key="ServerTypesForConsoleRun" value="MsSql" />
  </appSettings>
  <!-- Protected section - should be encrypted in production; contains connection string to db server (possibly with credentials) so this must be encrypted.
    Also contains crypto key for configuring LoginInfo crypto channel - used for encrypting sensitive info in Login module 
    (emails, phones used for multi-factor authentication). Note that passwords are not encrypted, they are hashed using strong hashing (BCrypt or RFC2898)
    Notice <section..> element in <configSections..> section at the top of this file - this is necessary for handling this section.  
    For methods of encrypting config file sections see: 
      http://www.codeproject.com/Articles/877258/How-to-Encrypt-Web-config-Using-aspnet-regiis-exe
    Note: if you see a number of compiler warnings in ErrorList window (like 'Cannot find schema information for the element protected')
            - just ignore these; they go away when you close the editor window with config file. 
  -->
  <protected>
    <add key="MsSqlConnectionString" value="Data Source=.;Initial Catalog=VitaBooks;Integrated Security=True" />
    <add key="SqlCeConnectionString" value="Data Source={bin}\VitaBooksSqlCe.sdf" />
    <add key="MySqlConnectionString" value="Server=localhost; Uid=admin; Pwd=_pass; Old Guids=true;" />
    <!--Note: for Postgres with windows auth, set Host to IP address, not localhost; you need to create Login Role in PG server 
      matching your user name, pwd does not matter.
      Also for Pg: run the following command (once) after creating database ( it imports a function for generating GUIDs):
      CREATE EXTENSION "uuid-ossp";
      -->
    <add key="PostgresConnectionString" value="Host=127.0.0.1;Port=5432;Database=VitaBooks;Pooling=true;userid=testuser;password=pass" />
    <!-- For SQLite, ISO8601 means string format, in standard date-time form. It is actually default option. 
      Other options (ticks, UnixEpoch, etc) are not supported/tested.
      Kind = Utc is necessary, because that's the only way I found to prevent SQLite.NET from converting values to local time
      (actually shifting value by several hours)
    -->
    <add key="SQLiteConnectionString" 
         value="Data Source={bin}\VitaBooksSQLite.db;foreign keys=true; DateTimeFormat=ISO8601; DateTimeKind=Utc" />
    <!-- Login info crypto key -->
    <add key="LoginInfoCryptoKey" value="5F29E686B74F176F74AD0D0B54937F5FD9FB190173AB06C5000CC35ED5C5E49E" />
    <!-- Optional - connection string for logs database. If specified, all log tables are placed there. Might be the same as main database 
    -->
    <add key="MsSqlLogConnectionString" value="Data Source=.;Initial Catalog=VitaBooksLogs;Integrated Security=True" />
  </protected>
  <!--
  -->
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6.1" />
  </startup>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>